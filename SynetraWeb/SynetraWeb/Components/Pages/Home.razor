
@page "/"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime


<PageTitle>Home</PageTitle>

<MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px">
	<CustomGraphics>
		<style>
			.heavy { font: bold 30px Helvetica; }
			.Rrrrr { font: italic 40px Helvetica; fill: rgb(62,44,221); }
		</style>
	</CustomGraphics>
</MudChart>

@code {
    private string lastKeyPressed;
    private HubConnection? hubConnection;
    private string clic;

    private async Task HandleKeyPress(KeyboardEventArgs e)
    { 
        lastKeyPressed = e.Key;
    }

    private async void HandleMouseClickWithArgs(MouseEventArgs e)
    {
        clic = e.Button switch
        {
            0 => "Gauche",
            1 => "Milieu",
            2 => "Droit",
            _ => "Inconnu"
        };
        await hubConnection.InvokeAsync("SendClickPress", clic);
        // Ajoutez ici votre logique supplémentaire
    }
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/sharehub"))
            .Build();

        await hubConnection.StartAsync();

    }


    private double mouseX = 0;
    private double mouseY = 0;

    [JSInvokable]
    public async Task ReceiveMousePosition(int x, int y, int height, int width)
    {
        // Votre logique ici
        mouseX = x;
        mouseY = y;

        await hubConnection.InvokeAsync("SendMouseMovement", x, y, height, width);
        StateHasChanged();
    }
    [JSInvokable]
    public async Task HandleKeyPressWithMouseInside(string key)
    {

        // Implémentez ici la logique souhaitée
        lastKeyPressed = key;

        await hubConnection.InvokeAsync("SendKeyPress", key);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleRightClick(double x, double y)
    {
        clic = "Droit";
        StateHasChanged();
        // Effectuez ici des actions supplémentaires
        await hubConnection.InvokeAsync("SendClickPress", clic);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupMousePositionListener", DotNetObjectReference.Create(this));
            await JSRuntime.InvokeVoidAsync("setupMouseEnterLeaveListeners", "test", dotNetReference);
            
            
        }
    }

    private void UpdateMousePosition(MouseEventArgs e)
    {
        mouseX = e.ClientX;
        mouseY = e.ClientY;
    }
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "United States", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = "Germany", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = "Sweden", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };
}
