@page "/users"
@using SynetraUtils.Models.DataManagement
@rendermode InteractiveServer

<PageTitle>Users</PageTitle>

<MudDataGrid T="User" @ref="grid" Items="@userList" DragDropColumnReordering="@_dragDropReorderingEnabled" ColumnsPanelReordering="@_columnsPanelReorderingEnabled"
             ColumnResizeMode="ResizeMode.Container" Hideable="@_hideable" Filterable="@_filterable" Groupable="@_groupable" FilterMode="@_filterMode" ShowMenuIcon="true">
    <Columns>
        <SelectColumn T="User" />
        <PropertyColumn Property="x => x.Id" Title="Id" />
        <PropertyColumn Property="x => x.Firstname" Hidden="true" DragAndDropEnabled="false" Groupable="false" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.Lastname" Title="LastName" Hidden="false" DragAndDropEnabled="true" Groupable="true" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.UserName" Title="UserName" Filterable="false" Hideable="false" />
        <PropertyColumn Property="x => x.Email" Title="UserName" Filterable="false" Hideable="false" />
        <PropertyColumn Property="x => x.EmailConfirmed" Title="UserName" Filterable="false" Hideable="false" />
        <PropertyColumn Property="x => x.CreatedDate" Title="CreatedDate" @bind-Hidden="@_hideMolar" Hideable="true" />
        <PropertyColumn Property="x => x.UpdatedDate" Hidden="_hideGroup" Title="Category" />
        <TemplateColumn Title="Template" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="User" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-rows flex-wrap mr-4">
    <MudSwitch @bind-Value="@_dragDropReorderingEnabled" Color="Color.Primary">Drag Drop Column Reordering</MudSwitch>
    <MudSwitch @bind-Value="@_columnsPanelReorderingEnabled" Color="Color.Primary">Columns Panel Column Reordering</MudSwitch>
    <MudSwitch @bind-Value="@_hideable" Color="Color.Primary">Hideable</MudSwitch>
    <MudSwitch @bind-Value="@_filterable" Color="Color.Primary">Filterable</MudSwitch>
    <MudSwitch @bind-Value="@_groupable" Color="Color.Primary">Groupable</MudSwitch>
    <MudSwitch @bind-Value="@_hideMolar" Color="Color.Primary" Converter="_oppositeBoolConverter">Molar Mass Visible</MudSwitch>
    <MudSwitch @bind-Value="@_hideGroup" Color="Color.Primary" Converter="_oppositeBoolConverter">Category Visible</MudSwitch>
</div>

<div class="d-flex flex-wrap mt-4">
    <MudRadioGroup T="DataGridFilterMode" @bind-Value="@_filterMode">
        <MudRadio Dense="true" Value="@DataGridFilterMode.Simple" Color="Color.Primary">Simple</MudRadio>
        <MudRadio Dense="true" Value="@DataGridFilterMode.ColumnFilterMenu" Color="Color.Tertiary">Column Menu</MudRadio>
        <MudRadio Dense="true" Value="@DataGridFilterMode.ColumnFilterRow">Column Row</MudRadio>
    </MudRadioGroup>
</div>

<div class="d-flex flex-wrap mt-4 gap-1">
    <MudButton OnClick="@(() => HideColumnsAsync(false))" Variant="Variant.Filled" Color="Color.Primary">Show All Columns</MudButton>
    <MudButton OnClick="@(() => HideColumnsAsync(true))" Variant="Variant.Filled" Color="Color.Primary">Hide All Columns</MudButton>
</div>
@code {
    private List<User> userList = new List<User>();

    private DataGridFilterMode _filterMode = DataGridFilterMode.Simple;
    private bool _dragDropReorderingEnabled = true;
    private bool _columnsPanelReorderingEnabled = true;
    private bool _hideable = true;
    private bool _filterable = true;
    private bool _groupable = true;
    private bool _hideMolar = false;
    private bool _hideGroup = false;
    public MudDataGrid<User> grid = null;

    private MudBlazor.Converter<bool, bool?> _oppositeBoolConverter = new()
        {
            SetFunc = value => !value,
            GetFunc = value => !value ?? true,
        };

    protected override async Task OnInitializedAsync()
    {
       
    }

    private async Task HideColumnsAsync(bool hide)
    {
        foreach (var column in grid.RenderedColumns)
        {
            if (hide)
            {
                await column.HideAsync();
            }
            else
            {
                await column.ShowAsync();
            }
        };
    }
}
