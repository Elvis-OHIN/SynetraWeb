@page "/parcs"

@using SynetraUtils.Models.DataManagement
@using SynetraWeb.Client.Models;
@using SynetraWeb.Client.Services;
@using SynetraWeb.Client.Modals;
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ParcService ParcService
@inject IHttpClientFactory ClientFactory

@rendermode InteractiveServer

<h3>Parcs</h3>

<MudButton @onclick="OpenDialogAddForm" Variant="Variant.Filled" Color="Color.Info" Class="mb-2">Ajouter un nouveau parc</MudButton>

<MudDialog @bind-IsVisible="isAddFormVisible" Options="dialogAddOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.AddBox" Class="mr-3" />Ajouter un parc
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="newParc" OnValidSubmit="AddParc">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Nom" @bind-Value="newParc.Name"
                                  For="@(() => newParc.Name)"></MudTextField>
                </MudCardContent>
            </MudCard>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Ajouter</MudButton>
            </MudCardActions>
        </EditForm>
    </DialogContent>
</MudDialog>

@if (parcs == null)
{
    <p>Loading...</p>
}
else
{

    <MudTable  Items="parcs" Hover="true" Striped="true" Dense="true" Bordered="true" Class="mb-2">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Nom</MudTh>
            <MudTh>Actif</MudTh>
            <MudTh>Date de création</MudTh>
            <MudTh>Date de modification</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Nom">@context.Name</MudTd>
            @if (@context.IsActive is true)
            {
                <MudTd DataLabel="Actif"><MudIcon Icon="@Icons.Material.Filled.Done" Color="Color.Success" /></MudTd>
            }else
            {
                <MudTd DataLabel="Actif"><MudIcon Icon="@Icons.Material.Filled.Clear" Color="Color.Error" /></MudTd>
            }
            <MudTd DataLabel="Date de création">@context.CreatedDate</MudTd>
            <MudTd DataLabel="Date de modification">@context.UpdatedDate</MudTd>
            <MudTd DataLabel="Action">
                <MudIconButton OnClick="(() => OpenDialogEditForm(context))"
                               Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               Variant="Variant.Filled"></MudIconButton>
                <MudIconButton OnClick="(() => OpenDialogDeleteForm(context))"
                               Icon="@Icons.Material.Filled.DeleteForever"
                               Color="Color.Error"
                               Variant="Variant.Filled"></MudIconButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>


    <MudDialog @bind-IsVisible="isEditFormvisible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />Modifier un parc
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="editParc" OnValidSubmit="EditParc">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Nom" @bind-Value="editParc.Name"
                                      For="@(() => editParc.Name)"></MudTextField>
                        <MudSwitch @bind-Value="editParc.IsActive" Color="Color.Primary" Label="Actif" />
                    </MudCardContent>
                </MudCard>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Modifier</MudButton>
                </MudCardActions>
            </EditForm>
        </DialogContent>
    </MudDialog>

    <MudDialog @bind-IsVisible="isDeleteFormVisible" Options="dialogDeleteFormOptions">
        <DialogContent>
            <MudText>Voulez-vous vraiment supprimer ce parc ?</MudText>
            </DialogContent>
            <DialogActions>
            <MudButton OnClick="CloseDialogDeleteForm">Annuler</MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteParc">Supprimer</MudButton>
            </DialogActions>
    </MudDialog>
}



<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

@code {

    private bool isEditFormvisible;
    private bool isAddFormVisible;
    private bool isDeleteFormVisible;
    private string searchString = null;
    private MudTable<Parc> table;
    private DialogOptions dialogOptions = new DialogOptions()
    {
            MaxWidth = MaxWidth.Medium, 
            FullWidth = true, 
            CloseButton = true,
            Position = DialogPosition.Center,
            ClassBackground = "my-custom-class"
    };
    private DialogOptions dialogAddOptions = new DialogOptions()
    {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center,
            ClassBackground = "my-custom-class"
    };
    private DialogOptions dialogDeleteFormOptions = new DialogOptions()
    {

        ClassBackground = "my-custom-class"
    };
    private List<Parc> parcs;
    private Parc newParc = new Parc();
    private Parc editParc = new Parc();
    private Parc deleteParc = new Parc();
    private Parc selectedModel;

    protected override async Task OnInitializedAsync()
    {
        parcs = await ParcService.GetAllAsync();
    }
    private void OpenDialogAddForm()
    {
        isAddFormVisible = true;
    }
    private void OpenDialogEditForm(Parc parc)
    {
        editParc = parc;
        isEditFormvisible = true;
    }
    private void OpenDialogDeleteForm(Parc parc)
    {
        deleteParc = parc;
        isDeleteFormVisible = true;
    }

    private void CloseDialogAddForm()
    {
        isAddFormVisible = false;
    }
    private void CloseDialogEditForm()
    {
        isEditFormvisible = false;
    }
    private void CloseDialogDeleteForm()
    {
        deleteParc = new Parc();
        isDeleteFormVisible = false;
    }
    private async void AddParc()
    {

        if (newParc != null)
        {
            newParc.IsActive = true;
            await ParcService.CreateAsync(newParc);
            parcs = await ParcService.GetAllAsync();
            newParc = new Parc();
            Snackbar.Add("Le parc à été ajouté", Severity.Success);
        }
    }
    private async void EditParc()
    {
        if (editParc != null)
        {
            await ParcService.UpdateAsync(editParc);
            parcs = await ParcService.GetAllAsync();
            Snackbar.Add("Le parc à été modifié", Severity.Success);
        }
    }
    private async void DeleteParc()
    { 
        if (deleteParc != null)
        {
            await ParcService.DeleteAsync(deleteParc.Id);
            deleteParc = new Parc();
            parcs = await ParcService.GetAllAsync();
            Snackbar.Add("Le parc à été supprimé", Severity.Success);
        }
        isDeleteFormVisible = false;
        StateHasChanged();
    }
   
    async Task OnFileChange(InputFileChangeEventArgs e)
    {

    }
    private void EditModel(Parc parc)
    {
        selectedModel = parc;
        // Naviguez vers la page d'édition ou affichez un formulaire d'édition dans ce composant.
    }

    private void ShowParc(int parcId)
    {
        NavigationManager.NavigateTo($"/parc/{parcId}");
    }
    private void CreateParc()
    {
        NavigationManager.NavigateTo("/parc");
    }


    private  async void DeleteModel(int id)
    {
       await ParcService.DeleteAsync(id);
       parcs = await ParcService.GetAllAsync();
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
